import "@fluencelabs/aqua-lib/builtin.aqua"

-- DOCUMENTATION:
-- https://fluence.dev

-- local
func hello_world(name: string) -> string:
    <- Op.concat_strings("Hello, ", name)

-- remote
func hello_world_remote(name: string) -> string:
    on HOST_PEER_ID:
        hello_msg <- hello_world(name)
        from_msg <- Op.concat_strings(hello_msg, "! From ")
        from_peer_msg <- Op.concat_strings(from_msg, HOST_PEER_ID)
    <- from_peer_msg

data NewInfo:
    external_addresses: string
    node_version: string
    air_version: string
    spell_version: string
    allowed_binaries: string

service Pee("peer"):
    identify() -> NewInfo

-- request response
func get_info() -> NewInfo, PeerId:
    on HOST_PEER_ID:
        info <- Pee.identify()
    <- info, HOST_PEER_ID

-- iterate through several peers
func get_infos(peers: []PeerId) -> []Info:
    infos: *Info
    for p <- peers:
        on p:
            infos <- Peer.identify()
    <- infos

-- parallel computation
func get_infos_par(peers: []PeerId) -> []Info:
    infos: *Info
    for p <- peers par:
        on p:
            infos <- Peer.identify()

    join infos[Op.array_length(peers) - 1] -- "-1" because it's 0-based
    par Peer.timeout(PARTICLE_TTL / 2, "")

    <- infos

-- using 'run --on'
service SSig("sig"):
    get_peer_id() -> string

func get_peer_id_on() -> PeerId:
    <- SSig.get_peer_id()
