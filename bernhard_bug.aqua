data FunctionAddress:
  peer_id: string
  service_id: string

data Provider:
  name: string
  url: string

data EVMResult:
  stdout: string
  stderr: string

-- service MultiProviderQuery("service-id"):
--   get_block_number(provider: ProviderInfo) -> EVMResult

service Console("run-console"):
    print(args: []string)

service Op("op"):
    noop()
    identity(s: string) -> string

func get_service_id_no_try(node: string, services: []FunctionAddress) -> string:
  res: *string
  for service <- services:
    if service.peer_id == node:
      Console.print([service.peer_id, node])
      res <<- service.service_id
  <- res[0]

func get_service_id_try(node: string, services: []FunctionAddress) -> string:
  res: *string
  for service <- services try:
    Console.print([service.peer_id, node])
    if service.peer_id == node:
      res <<- service.service_id
  <- res[0]

func get_service_id_try_correct(node: string, services: []FunctionAddress) -> string:
  res: *string
  for service <- services:
    try:
        Console.print([service.peer_id, node])
        if service.peer_id == node:
            res <<- service.service_id
  <- res[0]

func get_service_id_par(node: string, services: []FunctionAddress) -> string:
  res: *string
  for service <- services par:
    Console.print([service.peer_id, node])
    if service.peer_id == node:
      res <<- service.service_id
  <- res[0]

func simple():
   for var <- ["a", "b", "c"] try:
    Op.identity(var)
