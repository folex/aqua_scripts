import "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/spell/api.aqua"
import "@fluencelabs/spell/spell_service.aqua"
import "@fluencelabs/registry/subnetwork.aqua"

const KEY = "joined_deals"

service Console("run-console"):
    print(any: ⊤)

data Deal:
    deal_id: string
    spell_id: string

service DealJson("json"):
    parse(s: string) -> Deal

func resolve():
    on HOST_PEER_ID:
        deal_id = "df196f94e1695eacb0e9245c56605547d580cf7c"
        workers <- resolveSubnetwork(deal_id)
    Console.print(workers)

func list_decider(peers: []PeerId) -> string:
    print = (any: ⊤):
        on INIT_PEER_ID via HOST_PEER_ID:
            Console.print(any)

    print(peers)

    for peer <- peers:
        services: *[]Service
        on peer:
            print(peer)
            Spell "decider"
            s <- Spell.list_get_strings(KEY)
            for raw_deal <- s.strings par:
                deal <- DealJson.parse(raw_deal)
                spell_info <- Srv.info(deal.spell_id)
                on spell_info.worker_id:
                    worker_services <- Srv.list()
                    services <<- worker_services
                    aliases: *string
                    for service <- worker_services:
                        aliases <<- service.aliases[0]
                    prefix = Op.concat_strings(deal.deal_id, ": ")
                    msg = Op.concat_strings(prefix, Debug.stringify(aliases))
                    print(msg)
            join services[s.strings.length - 1]
    <- "OK"

func list_resolve() -> string:
    print = (any: ⊤):
        on INIT_PEER_ID via HOST_PEER_ID:
            Console.print(any)

    services: *[]Service

    on HOST_PEER_ID:
        Spell "decider"
        s <- Spell.list_get_strings(KEY)
        for raw_deal <- s.strings par:
            deal <- DealJson.parse(raw_deal)
            print(deal)

            -- spell_id = deal.spell_id
            -- spell_info <- Srv.info(spell_id)
            -- on spell_info.worker_id via HOST_PEER_ID:
            --     worker_services <- Srv.list()

            workers <- resolveSubnetwork(deal.deal_id)
            if workers != nil:
                for w <- workers!:
                    on w.metadata.peer_id via w.metadata.relay_id:
                        list <- Srv.list()
                        services <<- list
                        aliases: *string
                        for service <- list:
                            aliases <<- service.aliases[0]
                        prefix = Op.concat_strings(deal.deal_id, ": ")
                        msg = Op.concat_strings(prefix, Debug.stringify(aliases))
                        print(msg)
            else:
                print([deal.deal_id, "workers are nil"])

    join services[s.strings.length]

    <- "OK"